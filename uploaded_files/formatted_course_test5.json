[{"title":"CIS\u00a01050  Computational Data Exploration","semester":"Fall or Spring","prerequisites":"No prerequisites listed","course_unit":"1 Course Unit","info":"The primary goal of this course is to introduce computational methods of interacting with data. In this course, students will be introduced to the IPython programming environment. They will learn how to gather data, store it in appropriate data structures and then either write their own functions or use libraries to analyze and then display the salient information in that data. Data will be drawn from a variety of domains, including but not limited to travel, entertainment, politics, economics, biology etc.","assessment_method":"Midterms","class_structure":{"Recitation":{"day":"Monday","time":"16:00-17:30","mandatory":false,"duration":1}},"Course Quality":1.82,"Instructor Rating":1.62,"Course Difficulty":1.87,"Work Required":1.65,"Category":"Engineering"},{"title":"CIS\u00a01070  Visual Culture through the Computer's Eye","semester":"Fall or Spring","prerequisites":"No prerequisites listed","course_unit":"1 Course Unit","info":"Visual studies and the humanities more generally have thought about and modeled seeing of artworks for many centuries. What useful tools can machine learning develop from databases of art historical images or other datasets of visual culture? Can tools from machine learning help visual studies ask new questions? When put together, what can these fields teach us about visual learning, its pathways, its underlying assumptions, and the effects of its archives\/datasets? Class project teams will ideally be composed of both humanities majors and engineering majors who will develop datasets and\/or ask important questions of datasets, in addition to thinking and writing more generally about how computer vision could help in teaching and analyzing visual art. We are looking for a variety of students from different majors and schools to bring their diverse skill sets to the course. No programming knowledge is required. The course offers an example-based introduction to machine learning, so no prior knowledge of machine learning is required.","assessment_method":"Weekly tests","class_structure":{"Lecture":{"day":"Monday","time":"14:00-15:30","mandatory":true,"duration":2},"Lab":{"day":"Thursday","time":"08:00-09:30","mandatory":true,"duration":3}},"Course Quality":1.71,"Instructor Rating":1.65,"Course Difficulty":1.66,"Work Required":1.59,"Category":"General Electives"},{"title":"CIS\u00a01100  Introduction to Computer Programming","semester":"Fall or Spring","prerequisites":"No prerequisites listed","course_unit":"1 Course Unit","info":"Introduction to Computer Programming is the first course in our series introducing students to computer science. In this class you will learn the fundamentals of computer programming in Java, with emphasis on applications in science and engineering. You will also learn about the broader field of computer science and algorithmic thinking, the fundamental approach that computer scientists take to solving problems.","assessment_method":"Weekly homework, Project plus midterms, Weekly tests","class_structure":{"Recitation":{"day":"Wednesday","time":"12:00-13:30","mandatory":false,"duration":2},"Lab":{"day":"Tuesday","time":"08:00-09:30","mandatory":false,"duration":1},"Lecture":{"day":"Monday","time":"08:00-09:30","mandatory":true,"duration":1}},"Course Quality":1.67,"Instructor Rating":1.74,"Course Difficulty":1.75,"Work Required":1.55,"Category":"General Electives"},{"title":"CIS\u00a01200  Programming Languages and Techniques I","semester":"Fall or Spring","prerequisites":"No prerequisites listed","course_unit":"1 Course Unit","info":"A fast-paced introduction to the fundamental concepts of programming and software design. This course assumes some previous programming experience, at the level of a high school computer science class or CIS\u00a01100. (If you got at least 4 in the AP Computer Science A or AB exam, you will do great.) No specific programming language background is assumed: basic experience with any language (for instance Java, C, C++, VB, Python, Perl, or Scheme) is fine. If you have never programmed before, you should take CIS\u00a01100 first.","assessment_method":"Final exam, Midterms","class_structure":{"Recitation":{"day":"Tuesday","time":"16:00-17:30","mandatory":false,"duration":3},"Lecture":{"day":"Thursday","time":"10:00-11:30","mandatory":true,"duration":3},"Lab":{"day":"Wednesday","time":"08:00-09:30","mandatory":true,"duration":2}},"Course Quality":1.51,"Instructor Rating":1.74,"Course Difficulty":1.71,"Work Required":1.86,"Category":"Engineering"},{"title":"CIS\u00a01210  Programming Languages and Techniques II","semester":"Spring","prerequisites":"Prerequisite: CIS\u00a01200 AND CIS\u00a01600","course_unit":"1 Course Unit","info":"This is a course about Algorithms and Data Structures using the JAVA programming language. We introduce the basic concepts about complexity of an algorithm and methods on how to compute the running time of algorithms. Then, we describe data structures like stacks, queues, maps, trees, and graphs, and we construct efficient algorithms based on these representations. The course builds upon existing implementations of basic data structures in JAVA and extends them for the structures like trees, studying the performance of operations on such structures, and theiefficiency when used in real-world applications. A large project introducing students to the challenges of software engineering concludes the course.","assessment_method":"Project based, Final exam","class_structure":{"Recitation":{"day":"Thursday","time":"12:00-13:30","mandatory":false,"duration":1},"Lecture":{"day":"Tuesday","time":"08:00-09:30","mandatory":true,"duration":3}},"Course Quality":1.76,"Instructor Rating":1.54,"Course Difficulty":1.67,"Work Required":1.78,"Category":"Engineering"}]